---
title: Defining Cohorts in Atlas
---

Here is an example of how to definine the same cohort we did in sql [here](defining-cohorts-sql.qmd), but in Atlas.

After defining the cohort, we will use it with the same Eunomia dataset using the WebAPI, and hopefully get the same results.

## Concept Sets

-   [Myocardial Infraction](https://atlas-demo.ohdsi.org/#/conceptset/1884482)
-   [In-patient/ER](https://atlas-demo.ohdsi.org/#/conceptset/1884483)

## Cohort Definition

-   [Myocardial Infraction Cohort](https://atlas-demo.ohdsi.org/#/cohortdefinition/1790272)

## Connect to DB

```{r}
datasetName = "GiBleed"
dbms = "sqlite"

datasetLocation <- Eunomia::getDatabaseFile(
  datasetName = datasetName, 
  dbms = dbms, 
  databaseFile = tempfile(fileext = ".sqlite")
)
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms, server = datasetLocation)
connection = DatabaseConnector::connect(connectionDetails = connectionDetails)
#DatabaseConnector::getTableNames(connection, databaseSchema = 'main')
DatabaseConnector::querySql(connection = connection, sql = "select count(*) from cohort;")
```

## Add some Visits

I'm adding some visits so we get some results in the cohort. Fudging the data a bit...

```{r}
source("util.R")
insert_visits(connection)
```

## Get OHDSI Sql from WebAPI

```{r}
base_url <- "https://api.ohdsi.org/WebAPI"
cohort_id <- 1790272
#cohort_id <- 1790274
#cohort_id <- 1790286
generate_stats <- F

cohort_definition <- ROhdsiWebApi::getCohortDefinition(
  cohortId = cohort_id,
  baseUrl = base_url
)

#str(cohort_definition)

sql <- ROhdsiWebApi::getCohortSql(
  cohortDefinition = cohort_definition,
  baseUrl = base_url,
  generateStats = generate_stats
)
```

## Render, Translate, Execute

```{r}
#| results: hide
DatabaseConnector::renderTranslateExecuteSql(connection = connection, 
                                             sql = sql, 
                                             vocabulary_database_schema="main", 
                                             cdm_database_schema="main", 
                                             target_database_schema="main",
                                             target_cohort_table = "cohort",
                                             target_cohort_id = "1")
```

## Check Results

```{r}
sql <- "
  select * from @cdm.cohort;
"
cdm <- "main"
DatabaseConnector::renderTranslateQuerySql(
  connection = connection,
  sql = sql,
  cdm = cdm
)
```

**Subjects in original**: (1491, 105, 96, 3049, 2692)

Great, we got the same subjects.

## Characterization

Specify some demographic features

```{r}
settings <- FeatureExtraction::createCovariateSettings(
  useDemographicsGender = T,
  useDemographicsAge = T,
  useDemographicsAgeGroup = T,
  useDemographicsRace = T,
  useDemographicsEthnicity = T,
  useDemographicsIndexYear = T,
  useDemographicsIndexMonth = T,
  useDemographicsPriorObservationTime = T,
  useDemographicsPostObservationTime = T,
  useDemographicsTimeInCohort = T,
  useDemographicsIndexYearMonth = T
)
```

Extract those features across the cohort. Aggregated = T means we are considering the cohort as a whole, not on a per-patient basis.

```{r}
covariateData <- FeatureExtraction::getDbCovariateData(
  connectionDetails = connectionDetails,
  cdmDatabaseSchema = "main",
  cohortDatabaseSchema = "main",
  cohortTable = "cohort",
  cohortIds = c(1),
  covariateSettings = settings,
  aggregated = TRUE
)
summary(covariateData)
```

Well, we have the covariates here and some aggregations, but we need to map the covariateId to an actual description
```{r}
covariateData$covariates
```

Same thing for the continuous covariates, we have the covariateId, not the actual description...
```{r}
covariateData$covariatesContinuous
```

Ah, here is the mapping of covariateId to covariateName
```{r}
covariateData$covariateRef
```

Lets merge the covariates to the covariateRef to get the results along with the covariateName
```{r}
merged <- merge(covariateData$covariates, covariateData$covariateRef, by = "covariateId")
merged
```


A bit unrelated, but getting "table 1", frequently used in papers. 
```{r}
result <- FeatureExtraction::createTable1(covariateData1 = covariateData)
print(result, row.names = FALSE, right = FALSE)
```


