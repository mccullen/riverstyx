---
title: Phenotype Library
---

Using the OHDSI phenotype library

1.  Extract the Gastrointestinal bleeding with inpatient admission cohort definition.
2.  Populate the Eunomia GiBleed cohort table with patients satisfying this definition.
3.  View cohort diagnostics in RShiny App

------------------------------------------------------------------------

HADES packages used

-   [Eunomia](https://ohdsi.github.io/Eunomia/){target="_blank"} for connecting to a synthetic OMOP CDM database.
-   [PhenotypeLibrary](https://ohdsi.github.io/PhenotypeLibrary/){target="_blank"} for pulling OHDSI-vetted cohort definitions.
-   [CohortGenerator](https://ohdsi.github.io/CohortGenerator/){target="_blank"} for generating cohort tables in Eunomia
-   [CohortDiagnostics](https://ohdsi.github.io/CohortDiagnostics/){target="_blank"} for launching RShiny app to view cohort diagnostics.
-   [DatabaseConnector](https://ohdsi.github.io/DatabaseConnector/){target="_blank"} for connecting to our Eunomia dataset and executing queries


Other Packages used

-   [DT](https://rstudio.github.io/DT/){target="_blank"} for viewing phenotype log in jquery datatables format.
-   [dplyr](https://dplyr.tidyverse.org/){target="_blank"} for piping and data manipulation functions.

## Installation

``` r
# Needed to install some HADES packages
install.packages("remotes")

# Install HADES packages
install.packages("Eunomia")
install.packages("DatabaseConnector")
remotes::install_github("ohdsi/PhenotypeLibrary")
remotes::install_github("OHDSI/CohortGenerator")
remotes::install_github("OHDSI/CohortDiagnostics")

# Other supporting packages
install.packages("DT")
install.packages("dplyr")
```

```{r}
#| output: false
library(dplyr)
```

## View Log of all Phenotypes

PhenotypeLog is a tibble.

```{r}
class(PhenotypeLibrary::getPhenotypeLog())
```

It has a lot of columns, so we will just select cohortId and cohortName and pipe it into datatables for a more friendly view.

```{r}
PhenotypeLibrary::getPhenotypeLog() %>% select(cohortId, cohortName) %>% DT::datatable()
```

An alternative display of the phenotype library, showing all columns.

```{r}
#| df-print: paged
PhenotypeLibrary::getPhenotypeLog() |> as.data.frame()
```

## Extract GI Bleed Cohort
Using the search function of the DT table above, note that the cohortId for "Gastrointestinal bleeding with inpatient admission" is 77.


Let's pull this cohort definition set data frame

```{r}
cohort_ids <- c(77)
cohortDefinitionSet <- PhenotypeLibrary::getPlCohortDefinitionSet(cohortIds = cohort_ids)
cohortDefinitionSet
```
## View Cohort Json and SQL

### json

The json column can be used to import into Atlas

<details>

<summary>json output</summary>

```{r}

cohortDefinitionSet$json |> cat()
```

</details>

### sql

You can also generate the sql if you prefer...

<details>

<summary>sql output</summary>

```{r}
cohortDefinitionSet$sql |> cat()
```

</details>

## Import Cohort into OMOP CDM Database
Now that we have the cohort definition, we need to import it into our OMOP CDM database.

### Connect to Eunomia Synthetic DB
We will use the Eunomia GiBleed synthetic database for this tutorial, so let's connect to it. 

```{r}
#| output: false
#| label: gibleed
datasetName = "GiBleed"
dbms = "sqlite"

datasetLocation <- Eunomia::getDatabaseFile(
  datasetName = datasetName, 
  dbms = dbms, 
  databaseFile = tempfile(fileext = ".sqlite")
)
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms, server = datasetLocation)
connection = DatabaseConnector::connect(connectionDetails = connectionDetails)
```

### Create Cohort Tables

New tables will be generated for cohort diagnostics/generation. Let's have a look at them. 

```{r}
CohortGenerator::getCohortTableNames() |> str()
```

Let's create the tables on our database

```{r}
cdmDatabaseSchema <- "main"
cohortDatabaseSchema <- "main"
CohortGenerator::createCohortTables(
  connectionDetails = connectionDetails, 
  cohortDatabaseSchema = cohortDatabaseSchema
)
```

### Populate Cohort Tables

Recall, we used the GI Bleed cohort definition, and that is in cohortDefinitionSet.

Let's now populate our newly generated cohort tables using that definition and our existing data from Eunomia GiBleed dataset.

```{r}
#| label: create-cohort-tbl
#| output: false

cohortTables <- CohortGenerator::getCohortTableNames()
CohortGenerator::generateCohortSet(
  connectionDetails = connectionDetails,
  cdmDatabaseSchema = cdmDatabaseSchema,
  cohortDatabaseSchema = cohortDatabaseSchema,
  cohortTableNames = cohortTables,
  cohortDefinitionSet = cohortDefinitionSet
)
```

Let's have a look at our main cohort table. 

Notice: 

- cohort_definition_id is 77, corresponding to the cohort 77 for GI Bleed 
- We have subjects in and out of the cohort at the respective start/end dates, as per our definition of a cohort

```{r}
sql <- "
select * from main.cohort limit 10;
"
DatabaseConnector::querySql(connection = connection, sql = sql)
```

## Cohort Diagnostics

### Export Cohort Diagnostics

Export cohort diagnostics into csv files. This will be used later in an RShiny web-app for visualization

```{r}
#| output: false
#| eval: false
#| label: exec-diagnostics
exportFolder = "./data/cohort-diagnostics"
cohortTable = "cohort" # Not sure why you would have it a different name?

# Wrapping in try/catch so it works in binder...
tryCatch({
  CohortDiagnostics::executeDiagnostics(
    cohortDefinitionSet,
    connectionDetails = connectionDetails,
    cohortTable = cohortTable,
    cohortDatabaseSchema = cohortDatabaseSchema,
    cdmDatabaseSchema = cdmDatabaseSchema,
    exportFolder = exportFolder,
    databaseId = "MyCdm",
    minCellCount = 5
  )
}, error = function(e) {})
```

### Viewing Cohort Diagnostics

Create a sqlite file from the CSV output above so it can be displayed in an RShiny web app

```{r}
#| label: merge-results
#| eval: false
#| output: false
sqliteDbPath <- "./data/cohort-diagnostics.sqlite"
CohortDiagnostics::createMergedResultsFile(
  dataFolder = exportFolder, 
  overwrite = TRUE,
  sqliteDbPath = sqliteDbPath
)
```

Launch the WebApp. Note, this works okay locally, not great in mybinder. Something with the java calls is throwing it off, not sure what, but let me know if you find out a fix for this.

```{r}
#| eval: false
#| label: diagnostics-viewer
CohortDiagnostics::launchDiagnosticsExplorer(sqliteDbPath = sqliteDbPath)
```

## Debugging Stuff

Just playing around, testing things...

Get the table names of original connection

```{r}
#| eval: false
DatabaseConnector::getTableNames(connection)
```

Get a connection to the sqlite file used by the diagnostics viewer

```{r}
#| eval: false

library(DBI)
library(RSQLite)

con <- dbConnect(RSQLite::SQLite(), "./data/cohort-diagnostics.sqlite")
```

List tables in that sqlite file, just to see what they are. Probably match up with the csv files.

```{r}
#| eval: false
dbListTables(con)
```

Ensure you have data in one of the tables. It seems mybinder did not populate this, which resulted in an error. So, after having created the files, try refreshing the file explorer bane (bottom right). This may fix things. At least it fixes one error, but then you get that java error later on. Still working on it.

```{r}
#| eval: false
dbGetQuery(con, "SELECT * FROM database")
```
